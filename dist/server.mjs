"use strict";let x=["utf-8","utf-16","utf-16be"],A=class extends EventTarget{static SPLIT_UTF_8=0;static SPLIT_UTF_16_LE=1;static SPLIT_UTF_16_BE=2;#s;#e;constructor(e,t=0){if(super(),t?.constructor!=Number||t<0||t>=x.length)throw new TypeError("Invalid split mode");if(t)throw new Error("UTF-16LE/BE currently not implemented");if(!e||e?.constructor!=ReadableStream)throw new TypeError("Not a readable stream");this.#s=e;let r=e.getReader();this.#e=new TextDecoder(x[t],{fatal:!0});let o=!0,n=!0,s;(async()=>{for(r.closed.then(()=>{s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new Event("close")),n=!1}).catch(i=>{s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new ErrorEvent("error",{message:i.message,error:i})),this.dispatchEvent(new Event("close")),n=!1});o&&n;)try{let i=await r.read();if(o=!i.done,o){let a=i.value;if(this.dispatchEvent(new MessageEvent("chunk",{data:a})),a.constructor!=Uint8Array&&a.constructor!=Uint8ClampedArray)this.dispatchEvent(new MessageEvent("fail",{data:a}));else{let c=0,l=0,E=0,u=!1;for(let d=0;d<a.length;d++){switch(a[d]){case 10:{E==13?c++:(u=!0,l=d);break}case 13:{u=!0,l=d;break}default:u=!1}if(u){let h=a.subarray(c,l),p=h;s&&(p=new Uint8Array(s.length+h.length),p.set(s),p.set(h,s.length),s=void 0),this.dispatchEvent(new MessageEvent("raw",{data:p}));try{let y=this.#e.decode(p);this.dispatchEvent(new MessageEvent("text",{data:y}))}catch{this.dispatchEvent(new MessageEvent("fail",{data:p}))}c=d+1,u=!1}E=a[d]}if(!u)if(s){let d=a.subarray(c),h=new Uint8Array(s.length+d.length);h.set(s),h.set(d,s.length),s=h}else c<a.length&&(s=a.subarray(c))}}else s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new Event("close"))}catch(i){s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new ErrorEvent("error",{message:i.message,error:i})),this.dispatchEvent(new Event("close"))}})()}},m=A;let S=class extends EventTarget{static sleep(e){return new Promise(t=>{self.AbortSignal?AbortSignal.timeout(e).addEventListener("abort",t):setTimeout(t,e)})}#s;#e;#t=!1;get finished(){return this.#t}finish(){this.#t=!0,this.#e&&this.#e()}wait(){if(!this.#t)return this.#s}constructor(){super(),this.#s=new Promise(e=>{this.#e=()=>{this.#t=!0,e()}})}},g=S;let M="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_",T=new Uint8Array(1),R=e=>{let t="";for(;e>0;)crypto.getRandomValues(T),t+=M[Math.floor(T[0]&63)],e--;return t};let w={Server:"Eclipsed","Content-Type":"text/plain","Cache-Control":"no-cache, no-store","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, OPTIONS","Access-Control-Allow-Origin":"*"},f={Server:"Eclipsed","Content-Type":"text/event-stream","Cache-Control":"no-cache, no-store",Vary:"Authorization, If-Match, Last-Event-ID","Access-Control-Allow-Headers":"Authorization, Accept, Cache-Control, If-Match, Last-Event-ID","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, OPTIONS","Access-Control-Allow-Origin":"*"},v=new TextEncoder;let b=e=>e.replaceAll("\r",`
`).replaceAll(`\r
`,`
`).split(`
`),P=(e,t)=>{for(let r=0;r<e.length;r++)if(e.charCodeAt(r)<32&&(r!=10&&r!=13||!t))throw new RangeError("Control characters are not allowed")},C=class extends EventTarget{#s;#e=[];#t=[];#a;#l=!1;#c=0;#n=0;#r=0;#i=0;#d=!1;CLOSED=0;OPEN=3;TX_OPEN=1;RX_OPEN=2;#o(){let e=this;console.debug(`[Eclipsed] Old state: ${e.#n}`);let t=0;e.#t.length&&(t|=1),e.#e.length&&(t|=2),t!=e.#n&&(e.#n=t),console.debug(`[Eclipsed] New state: ${e.#n}`);let r=0,o=0,n=0,s=0;e.#e.length>e.#r?(console.debug("[Eclipsed] New Rx"),e.dispatchEvent(new Event("newrx")),e.#r<1&&(console.debug("[Eclipsed] Connect Rx"),e.dispatchEvent(new Event("connectrx")),r=1)):e.#e.length<e.#r&&(console.debug("[Eclipsed] Dead Rx"),e.dispatchEvent(new Event("deadrx")),e.#e.length<1&&(console.debug("[Eclipsed] Close Rx"),e.dispatchEvent(new Event("closerx")),n=1)),e.#t.length>e.#i?(console.debug("[Eclipsed] New Tx"),e.dispatchEvent(new Event("newtx")),e.#i<1&&(console.debug("[Eclipsed] Connect Tx"),e.dispatchEvent(new Event("connecttx")),o=1)):e.#t.length<e.#i&&(console.debug("[Eclipsed] Dead Tx"),e.dispatchEvent(new Event("deadtx")),e.#t.length<1&&(console.debug("[Eclipsed] Close Tx"),e.dispatchEvent(new Event("closetx")),s=1)),r*o&&(console.debug("[Eclipsed] Connect"),e.dispatchEvent(new Event("connect"))),n*s&&(console.debug("[Eclipsed] Close"),e.dispatchEvent(new Event("close"))),console.debug(`[Eclipsed] Receive sockets: ${e.#e.length}`),console.debug(`[Eclipsed] Send sockets: ${e.#t.length}`),e.#r=e.#e.length,e.#i=e.#t.length}get id(){return this.#a}get readyState(){return this.#n}getRequest(){let e=this;if(e.#e.length)return e.#e[0]}getResponse(){let e=this;if(e.#t.length)return e.#t[0]}sendEvent(e="message"){P(e),this.getResponse()[1].enqueue(v.encode(`event: ${e}
`))}sendData(e){b(e).forEach(t=>{this.getResponse()[1].enqueue(v.encode(`data: ${t}
`))})}sendComment(e){b(e).forEach(t=>{this.getResponse()[1].enqueue(v.encode(`:${t}
`))})}sendFlush(){let e=this;e.#d?e.getResponse()[1].enqueue(v.encode(`
`)):e.getResponse()[1].enqueue(v.encode(`id: ${e.#a}.${e.#c}

`)),e.#c++}send(e,t){let r=this;t&&r.sendEvent(t),r.sendData(e),r.sendFlush()}useCustomExt(e){console.debug("[Eclipsed] Connection supports Eclipsed custom extensions."),this.#d=e}attachRequest(e){let t=this;this.#e.push(e),t.#o(),t.useCustomExt(!0);let r=new g,o=new m(e.body,0,"utf-8"),n,s="";return o.addEventListener("text",({data:i})=>{let a=i?.indexOf(":");if(!i?.trim()?.length)s&&(t.dispatchEvent(new MessageEvent(n||"message",{data:s})),n=void 0,s="");else if(i.codePointAt(0)!=58){if(a>-1){let c=i.slice(0,a),l=a+1;i.codePointAt(a+1)==32&&l++;let E=i.slice(l);switch(c){case"event":{n=E;break}case"data":{s.length&&(s+=`
`),s+=E;break}default:}}}}),o.addEventListener("close",()=>{r.finish();let i=t.#e.indexOf(e);i>=0&&t.#e.splice(i,1),t.#o()}),r.wait()}async newResponse(){let e=this,t,r=!0,o=new g,n,s=new ReadableStream({start:c=>{n=c,o.finish()},cancel:c=>{if(o.finished){let l=e.#t.indexOf(t);l>=0&&e.#t.splice(l,1),e.#o()}else r=!1}}),i=structuredClone(f);i.ETag=e.#a;let a=new Response(s,{status:200,headers:i});return await o.wait(),t=[a,n],r&&(e.#t.push(t),e.#o()),a}constructor(e,t,r){super();let o=this;if(!e)throw new Error("Invalid event socket root");if(!t)throw new Error("Invalid socket ID");o.#s=e,o.#a=t,o.#l=!!r,o.addEventListener("connecttx",()=>{o.sendComment("cc.ltgc.eclipsed:new")})}},k=class extends EventTarget{static EventSocket=C;#s;#e={};#t(e){return console.debug(`[Eclipsed] Does the socket pool have socket ID "${e}"? ${!!this.#e[e]}`),this.#e[e]}constructor(){super()}upgradeEventStream(e){let t=this,r,o=e.headers.get("Accept");switch(o){case"text/event-stream":{r="eventSocket";break}case"application/grpc":{r="grpc";break}default:if(o.indexOf("application/grpc+")>=0)r="grpc";else return{untilRespond:Promise.resolve(),response:new Response("Bad request",{status:400,headers:w})}}if(r=="grpc"&&(e.method=="GET"||e.method=="get"))return{untilRespond:Promise.resolve(),response:new Response("Bad request",{status:400,headers:w})};let n,s;if(e.headers.has("Authorization")?(s=e.headers.get("Authorization"),s.slice(0,7)=="Bearer "&&(s=s.slice(7))):e.headers.has("If-Match")&&(s=e.headers.get("If-Match"),s.slice(0,2)=="W/"&&(s=s.slice(2))),e.headers.has("Last-Event-ID")){s=e.headers.get("Last-Event-ID");let i=s.indexOf(".");i>0&&(s=s.slice(0,i))}if(s&&(n=t.#t(s)),!n){let i=s||R(16);n=new C(t,i),t.#e[i]=n,n.addEventListener("newrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("newtx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connectrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connecttx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connect",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("deadrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("deadtx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("closerx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("closetx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("close",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))})}switch(e.method){case"GET":case"get":{return s&&n.useCustomExt(!0),{untilRespond:Promise.resolve(),response:n.newResponse()};break}case"POST":case"post":case"PUT":case"put":case"PATCH":case"patch":{switch(r){case"eventSocket":{return n.attachRequest(e),{untilRespond:n.attachRequest(e),response:new Response("Client socket send complete",{status:200,headers:f})};break}case"grpc":return{untilRespond:Promise.resolve(),response:new Response("Client gRPC send complete",{status:200,headers:f})}}break}default:return{untilRespond:Promise.resolve(),response:new Response("Unknown method",{status:405,headers:w})}}}},B=k;export{B as default};
