"use strict";let m=["utf-8","utf-16","utf-16be"],S=class extends EventTarget{static SPLIT_UTF_8=0;static SPLIT_UTF_16_LE=1;static SPLIT_UTF_16_BE=2;#s;#e;constructor(e,t=0){if(super(),t?.constructor!=Number||t<0||t>=m.length)throw new TypeError("Invalid split mode");if(t)throw new Error("UTF-16LE/BE currently not implemented");if(!e||e?.constructor!=ReadableStream)throw new TypeError("Not a readable stream");this.#s=e;let i=e.getReader();this.#e=new TextDecoder(m[t],{fatal:!0});let r=!0,n=!0,s;(async()=>{for(i.closed.then(()=>{s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new Event("close")),n=!1}).catch(o=>{s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new ErrorEvent("error",{message:o.message,error:o})),this.dispatchEvent(new Event("close")),n=!1});r&&n;)try{let o=await i.read();if(r=!o.done,r){let a=o.value;if(this.dispatchEvent(new MessageEvent("chunk",{data:a})),a.constructor!=Uint8Array&&a.constructor!=Uint8ClampedArray)this.dispatchEvent(new MessageEvent("fail",{data:a}));else{let c=0,d=0,g=0,u=!1;for(let l=0;l<a.length;l++){switch(a[l]){case 10:{g==13?c++:(u=!0,d=l);break}case 13:{u=!0,d=l;break}default:u=!1}if(u){let h=a.subarray(c,d),p=h;s&&(p=new Uint8Array(s.length+h.length),p.set(s),p.set(h,s.length),s=void 0),this.dispatchEvent(new MessageEvent("raw",{data:p}));try{let A=this.#e.decode(p);this.dispatchEvent(new MessageEvent("text",{data:A}))}catch{this.dispatchEvent(new MessageEvent("fail",{data:p}))}c=l+1,u=!1}g=a[l]}if(!u)if(s){let l=a.subarray(c),h=new Uint8Array(s.length+l.length);h.set(s),h.set(l,s.length),s=h}else c<a.length&&(s=a.subarray(c))}}else s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new Event("close"))}catch(o){s&&(this.dispatchEvent(new MessageEvent("raw",{data:s})),s=void 0),this.dispatchEvent(new ErrorEvent("error",{message:o.message,error:o})),this.dispatchEvent(new Event("close"))}})()}},x=S;let P=class extends EventTarget{static sleep(e){return new Promise(t=>{self.AbortSignal?AbortSignal.timeout(e).addEventListener("abort",t):setTimeout(t,e)})}#s;#e;#t=!1;get finished(){return this.#t}finish(){this.#t=!0,this.#e&&this.#e()}wait(){if(!this.#t)return this.#s}constructor(){super(),this.#s=new Promise(e=>{this.#e=()=>{this.#t=!0,e()}})}},v=P;let M="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_",T=new Uint8Array(1),R=e=>{let t="";for(;e>0;)crypto.getRandomValues(T),t+=M[Math.floor(T[0]&63)],e--;return t};let w={Server:"Eclipsed","Content-Type":"text/plain","Cache-Control":"no-cache, no-store","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, OPTIONS","Access-Control-Allow-Origin":"*"},f={Server:"Eclipsed","Content-Type":"text/event-stream","Cache-Control":"no-cache, no-store",Vary:"Authorization, If-Match, Last-Event-ID","Access-Control-Allow-Headers":"Authorization, Accept, Cache-Control, If-Match, Last-Event-ID","Access-Control-Allow-Methods":"GET, POST, PUT, PATCH, OPTIONS","Access-Control-Allow-Origin":"*"},E=new TextEncoder,b=E.encode("data: ");let y=e=>e.replaceAll("\r",`
`).replaceAll(`\r
`,`
`).split(`
`),k=(e,t)=>{for(let i=0;i<e.length;i++)if(e.charCodeAt(i)<32&&(i!=10&&i!=13||!t))throw new RangeError("Control characters are not allowed")},C=class extends EventTarget{#s;#e=[];#t=[];#n;#d=!1;#c=0;#a=0;#r=0;#o=0;#l=!1;CLOSED=0;OPEN=3;TX_OPEN=1;RX_OPEN=2;#i(){let e=this;console.debug(`[Eclipsed] Old state: ${e.#a}`);let t=0;e.#t.length&&(t|=1),e.#e.length&&(t|=2),t!=e.#a&&(e.#a=t),console.debug(`[Eclipsed] New state: ${e.#a}`);let i=0,r=0,n=0,s=0;e.#e.length>e.#r?(console.debug("[Eclipsed] New Rx"),e.dispatchEvent(new Event("newrx")),e.#r<1&&(console.debug("[Eclipsed] Connect Rx"),e.dispatchEvent(new Event("connectrx")),i=1)):e.#e.length<e.#r&&(console.debug("[Eclipsed] Dead Rx"),e.dispatchEvent(new Event("deadrx")),e.#e.length<1&&(console.debug("[Eclipsed] Close Rx"),e.dispatchEvent(new Event("closerx")),n=1)),e.#t.length>e.#o?(console.debug("[Eclipsed] New Tx"),e.dispatchEvent(new Event("newtx")),e.#o<1&&(console.debug("[Eclipsed] Connect Tx"),e.dispatchEvent(new Event("connecttx")),r=1)):e.#t.length<e.#o&&(console.debug("[Eclipsed] Dead Tx"),e.dispatchEvent(new Event("deadtx")),e.#t.length<1&&(console.debug("[Eclipsed] Close Tx"),e.dispatchEvent(new Event("closetx")),s=1)),i*r&&(console.debug("[Eclipsed] Connect"),e.dispatchEvent(new Event("connect"))),n*s&&(console.debug("[Eclipsed] Close"),e.dispatchEvent(new Event("close"))),console.debug(`[Eclipsed] Receive sockets: ${e.#e.length}`),console.debug(`[Eclipsed] Send sockets: ${e.#t.length}`),e.#r=e.#e.length,e.#o=e.#t.length}get id(){return this.#n}get readyState(){return this.#a}getRequest(){let e=this;if(e.#e.length)return e.#e[0]}getResponse(){let e=this;if(e.#t.length)return e.#t[0]}sendEvent(e="message"){k(e),this.getResponse()[1].enqueue(E.encode(`event: ${e}
`))}sendData(e){y(e).forEach(t=>{this.getResponse()[1].enqueue(E.encode(`data: ${t}
`))})}sendDataRaw(e){if(!e?.byteLength||e.byteLength!=1)throw new TypeError("Only Uint8Array is accepted");let t=0,i=!1;for(let r=0;r<e.length;r++){let n=e[r];switch(n){case 10:case 13:i||(this.getResponse()[1].enqueue(b),this.getResponse()[1].enqueue(e.subarray(t,r)),i=!0),t=r+1;default:n<32&&(e[r]=32),i=!1}}i||(this.getResponse()[1].enqueue(b),this.getResponse()[1].enqueue(e.subarray(t,ptr)))}sendComment(e){y(e).forEach(t=>{this.getResponse()[1].enqueue(E.encode(`:${t}
`))})}sendFlush(){let e=this;e.#l?e.getResponse()[1].enqueue(E.encode(`
`)):e.getResponse()[1].enqueue(E.encode(`id: ${e.#n}.${e.#c}

`)),e.#c++}send(e,t){let i=this;t&&i.sendEvent(t),i.sendData(e),i.sendFlush()}useCustomExt(e){console.debug("[Eclipsed] Connection supports Eclipsed custom extensions."),this.#l=e}close(){let e=this;for(console.debug(`[Eclipsed] Closing down the socket: ${e.#n}...`);e.#e.length>0;)e.#e[0].cancel(),e.#e.splice(0,1);for(;e.#t.length>0;)e.#t[0][1].close(),e.#t.splice(0,1);e.#i()}attachRequest(e){let t=this;this.#e.push(e),t.#i(),t.useCustomExt(!0);let i=new v,r=new x(e.body,0,"utf-8"),n,s="";return r.addEventListener("text",({data:o})=>{let a=o?.indexOf(":");if(!o?.trim()?.length)s&&(t.dispatchEvent(new MessageEvent(n||"message",{data:s})),n=void 0,s="");else if(o.codePointAt(0)!=58){if(a>-1){let c=o.slice(0,a),d=a+1;o.codePointAt(a+1)==32&&d++;let g=o.slice(d);switch(c){case"event":{n=g;break}case"data":{s.length&&(s+=`
`),s+=g;break}default:}}}}),r.addEventListener("close",()=>{i.finish();let o=t.#e.indexOf(e);o>=0&&t.#e.splice(o,1),t.#i()}),i.wait()}async newResponse(){let e=this,t,i=!0,r=new v,n,s=new ReadableStream({start:c=>{n=c,r.finish()},cancel:c=>{if(r.finished){let d=e.#t.indexOf(t);d>=0&&e.#t.splice(d,1),e.#i()}else i=!1}}),o=structuredClone(f);o.ETag=e.#n;let a=new Response(s,{status:200,headers:o});return await r.wait(),t=[a,n],i&&(e.#t.push(t),e.#i()),a}constructor(e,t,i){super();let r=this;if(!e)throw new Error("Invalid event socket root");if(!t)throw new Error("Invalid socket ID");r.#s=e,r.#n=t,r.#d=!!i,r.addEventListener("connecttx",()=>{r.sendComment("cc.ltgc.eclipsed:new")})}},L=class extends EventTarget{static EventSocket=C;#s;#e={};#t(e){return console.debug(`[Eclipsed] Does the socket pool have socket ID "${e}"? ${!!this.#e[e]}`),this.#e[e]}constructor(){super()}upgradeEventStream(e){let t=this,i,r=e.headers.get("Accept");switch(r){case"text/event-stream":{i="eventSocket";break}case"application/grpc":{i="grpc";break}default:if(r.indexOf("application/grpc+")>=0)i="grpc";else return{untilRespond:Promise.resolve(),response:new Response("Bad request",{status:400,headers:w})}}if(i=="grpc"&&(e.method=="GET"||e.method=="get"))return{untilRespond:Promise.resolve(),response:new Response("Bad request",{status:400,headers:w})};let n,s;if(e.headers.has("Authorization")?(s=e.headers.get("Authorization"),s.slice(0,7)=="Bearer "&&(s=s.slice(7))):e.headers.has("If-Match")&&(s=e.headers.get("If-Match"),s.slice(0,2)=="W/"&&(s=s.slice(2))),e.headers.has("Last-Event-ID")){s=e.headers.get("Last-Event-ID");let o=s.indexOf(".");o>0&&(s=s.slice(0,o))}if(s&&(n=t.#t(s)),!n){let o=s||R(16);n=new C(t,o),t.#e[o]=n,n.addEventListener("newrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("newtx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connectrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connecttx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("connect",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("deadrx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("deadtx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("closerx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("closetx",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))}),n.addEventListener("close",a=>{t.dispatchEvent(new MessageEvent(a.type,{data:n,source:t}))})}switch(e.method){case"GET":case"get":{return s&&n.useCustomExt(!0),{untilRespond:Promise.resolve(),response:n.newResponse()};break}case"POST":case"post":case"PUT":case"put":case"PATCH":case"patch":{switch(i){case"eventSocket":{return n.attachRequest(e),{untilRespond:n.attachRequest(e),response:new Response("Client socket send complete",{status:200,headers:f})};break}case"grpc":return{untilRespond:Promise.resolve(),response:new Response("Client gRPC send complete",{status:200,headers:f})}}break}default:return{untilRespond:Promise.resolve(),response:new Response("Unknown method",{status:405,headers:w})}}}},B=L;export{B as default};
